

;======= DATASET_CREATE_DATA_PREP.PY =======
[DATAPREPROCESSING]
PATH_DATA = ./Dataset/Common/;파일명
TARGET_COL = ;종속 변수 명
POSITIVE_VALUE = None

CATEGORICAL_COL = ;명목형 변수
NUMERIC_COL = ;수치형 변수

LABEL_METHOD = Regression 
;LABEL_METHOD : Classification, Regression
OUTLIER_METHOD = None
SAVE_FILE_PATH = ./Dataset/Common/

[DATASCALING]
SCALER_TYPE = standard
;SCALER_TYPE : standard, min_max, robust
SCALER_SAVE_PATH = ./Scaler/

;======= MODEL_FIRST_TIME_SELECT_MODEL.PY =======
[MODEL_FIRST]
TRAIN_X = C:\Workspace\Hansbar\Dataset\Common\;파일명
TRAIN_Y = C:\Workspace\Hansbar\Dataset\Common\;파일명
TASK = regression

;======= MODEL_SECOND_TIME_SELECT_MODEL.PY ======= Grid_search
[MODEL_SECOND]
TRAIN_X = C:\Workspace\Hansbar\Dataset\Common\;파일명
TRAIN_Y = C:\Workspace\Hansbar\Dataset\Common\;파일명
TEST_X = C:\Workspace\Hansbar\Dataset\Common\;파일명
TEST_Y = C:\Workspace\Hansbar\Dataset\Common\;파일명
TASK = regression
MODEL = XGBoost Regressor
;classification
;'Logistic Regression','Random Forest Classifier','SVC','MLP Classifier','XGBoost Classifier'
;regression
;'Linear Regression','Random Forest Regressor','SVR','MLP Regressor','XGBoost Regressor'

[GRID_PARAMS]
;classification
Logistic Regression = {
    "C": [0.001, 0.01, 0.1, 1, 10, 100],
    "penalty": [None,'l1', 'l2'],
    "random_state": [42]
    }
Random Forest Classifier = {
    "n_estimators": [100, 200, 300],
    "max_depth": [None, 10, 20, 30],
    "min_samples_split": [2, 5, 10],
    "min_samples_leaf": [1, 2, 4],
    "random_state": [42]
    }
SVC = {
    "C": [0.1, 1, 10],
    "kernel": ['linear', 'rbf'],
    "gamma": ['scale', 'auto'],
    "random_state": [42]
    }
MLP Classifier = {
    "hidden_layer_sizes": [(50,), (100,), (50, 50), (100, 50)],
    "activation": ['relu', 'tanh'],
    "solver": ['adam'],
    "alpha": [0.0001, 0.05],
    "learning_rate": ['constant', 'adaptive'],
    "random_state": [42]
    }
XGBoost Classifier = {
    "n_estimators": [100, 200], 
    "learning_rate": [0.01], 
    "max_depth": [None, 3], 
    "random_state": [42]
    }
;objective: binary:logistic

;regression
Linear Regression = {
    'fit_intercept': [True, False],
    'positive': [True, False],
    'n_jobs': [-1]
    }
Random Forest Regressor = {
    'n_estimators': [100, 200, 300, 700],
    'max_features': [None, 'log2', 'sqrt', 0.2],
    'max_depth': [None,2,3],
    'min_samples_split': [2],
    'min_samples_leaf': [1],
    'bootstrap': [True, False],
    'random_state': [42]
    }
SVR = {
    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
    'C': [0.1, 1, 10,3,5],
    'epsilon': [0.01, 0.1, 0.5],
    'shrinking': [True, False]
    }
MLP Regressor = {
    'hidden_layer_sizes': [(50, 50, 50)],
    'activation': ['relu', 'tanh', 'logistic'],
    'solver': ['adam', 'lbfgs'],
    'alpha': [0.0001, 0.001, 0.01],
    'learning_rate': ['constant', 'adaptive'],
    'random_state': [42]
    }
XGBoost Regressor = {
    'n_estimators': [100, 200, 300, 700],
    'learning_rate': [0.01, 0.1, 0.05],
    'max_depth': [3, 2],
    'min_child_weight': [1, 2, None],
    'subsample': [0.8,None],
    'gamma': [0, 1, 2, 0.5,None],
    'colsample_bytree': [0.8,None],
    'random_state': [42]
    }


;======= PREDICTION =======
[PREDICTION_TEST]
TEST_X = C:\Workspace\Hansbar\Dataset\Common\;파일명
TEST_Y = C:\Workspace\Hansbar\Dataset\Common\;파일명
TASK = regression
MODEL = ;파일명

[PREDICTION_TEST_ALL_MODEL]
TEST_X = C:\Workspace\PP\Dataset\Common\;파일명
TEST_Y = C:\Workspace\PP\Dataset\Common\;파일명
TASK = classification

[PREDICTION_UNSEEN]
UNSEEN_X = C:\Workspace\Hansbar\Dataset\Common\;파일명
UNSEEN_Y = C:\Workspace\Hansbar\Dataset\Common\;파일명
;UNSEEN_Y = None

TASK = regression 
#classification
SCALER = C:\Workspace\Hansbar\Scaler\;파일명
MODEL = ;파일명

;======= SOLUTION_PSO =======
[SOLUTION_PSO]
MIN_MAX_TARGET_DATA_PATH = ;파일명
POSITIVE_COLUMN_SELECT = ;종속 변수 명
POSITIVE_VALUE = None
TASK = regression 

CATEGORICAL_COL = ;명목 변수 명
NUMERIC_COL = ;수치형 변수 명

SCALER = ;파일명
MODEL = ;파일명
;;POSITIVE_COLUMN_SELECT의 unique value 값이 3개 이상인 경우 POSITIVE_VALUE는 None으로 작성해야함  
SWARMSIZE = 400
MAXITER = 20

;;POSITIVE_SELECT,POSITIVE_VALUE : PSO 적용을 위한 MIN-MAX 바운더리 생성을 위해 종속변수 및 값 선택
;;DEPENDENT_COLUMN_UNIQUE_COUNT가 3이상인 경우 POSITIVE_VALUE 작성 불필요